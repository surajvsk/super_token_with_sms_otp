"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getToken = exports.getJwksMock = exports.EXPIRY_DATE = void 0;
var mock_jwks_1 = require("mock-jwks");
var verifyAppleIdToken_1 = require("../../lib/verifyAppleIdToken");
exports.EXPIRY_DATE = '2021-01-01';
var getJwksMock = function (iss, path) { return (0, mock_jwks_1.default)(iss, path); };
exports.getJwksMock = getJwksMock;
var getToken = function (params, jwksMock) {
    var _a, _b, _c, _d;
    if (!jwksMock) {
        jwksMock = (0, exports.getJwksMock)(verifyAppleIdToken_1.APPLE_BASE_URL, verifyAppleIdToken_1.JWKS_APPLE_URI);
    }
    return jwksMock.token({
        iss: params.iss,
        aud: params.aud,
        iat: ((_a = params.iat) !== null && _a !== void 0 ? _a : new Date('2020-11-07')).getTime() / 1000,
        exp: ((_b = params.exp) !== null && _b !== void 0 ? _b : new Date("".concat(exports.EXPIRY_DATE, "T23:59:59Z"))).getTime() / 1000,
        sub: params.sub,
        c_hash: (_c = params.cHash) !== null && _c !== void 0 ? _c : 'hash',
        email: params.email,
        email_verified: true,
        is_private_email: true,
        auth_time: ((_d = params.authTime) !== null && _d !== void 0 ? _d : new Date('2020-11-06')).getTime() / 1000,
        nonce_supported: true,
        nonce: params.nonce,
    });
};
exports.getToken = getToken;
//# sourceMappingURL=jwksMock.js.map