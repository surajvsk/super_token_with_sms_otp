"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var mockdate_1 = require("mockdate");
var index_1 = require("../index");
var verifyAppleIdToken_1 = require("../lib/verifyAppleIdToken");
var jwksMock_1 = require("./utils/jwksMock");
describe('Verify Apple idToken', function () {
    var clientId = 'test.app';
    var secondClientId = 'test2.app';
    var email = 'test@app.com';
    var jwksMock = (0, jwksMock_1.getJwksMock)(verifyAppleIdToken_1.APPLE_BASE_URL, verifyAppleIdToken_1.JWKS_APPLE_URI);
    beforeAll(function () {
        mockdate_1.default.set(jwksMock_1.EXPIRY_DATE);
        jwksMock.start();
    });
    afterAll(function () { return jwksMock.stop(); });
    it('Token is valid', function () { return __awaiter(void 0, void 0, void 0, function () {
        var token, claims;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    token = (0, jwksMock_1.getToken)({
                        email: email,
                        iss: verifyAppleIdToken_1.APPLE_BASE_URL,
                        aud: clientId,
                        sub: email,
                    }, jwksMock);
                    return [4 /*yield*/, (0, index_1.default)({ clientId: clientId, idToken: token })];
                case 1:
                    claims = _a.sent();
                    expect(claims.email).toEqual(email);
                    expect(claims.aud).toEqual(clientId);
                    expect(claims).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    it('Token is valid with multiple client ids', function () { return __awaiter(void 0, void 0, void 0, function () {
        var token, claims;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    token = (0, jwksMock_1.getToken)({
                        email: email,
                        iss: verifyAppleIdToken_1.APPLE_BASE_URL,
                        aud: secondClientId,
                        sub: email,
                    }, jwksMock);
                    return [4 /*yield*/, (0, index_1.default)({ clientId: [clientId, secondClientId], idToken: token })];
                case 1:
                    claims = _a.sent();
                    expect(claims.email).toEqual(email);
                    expect(claims.aud).toEqual(secondClientId);
                    expect(claims).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    it('ISS field is not valid', function () { return __awaiter(void 0, void 0, void 0, function () {
        var idToken, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    idToken = (0, jwksMock_1.getToken)({
                        email: email,
                        sub: 'sub',
                        aud: clientId,
                        iss: 'test.iss',
                    }, jwksMock);
                    return [4 /*yield*/, (0, index_1.default)({ clientId: clientId, idToken: idToken })];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _a.sent();
                    return [2 /*return*/, expect(error_1.message).toMatch(/The iss does not match the Apple URL/)];
                case 3: throw new Error('Expected to throw');
            }
        });
    }); });
    it('The aud field is not valid', function () { return __awaiter(void 0, void 0, void 0, function () {
        var idToken, error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    idToken = (0, jwksMock_1.getToken)({
                        email: email,
                        iss: verifyAppleIdToken_1.APPLE_BASE_URL,
                        aud: clientId,
                        sub: 'sub',
                    }, jwksMock);
                    return [4 /*yield*/, (0, index_1.default)({ idToken: idToken, clientId: 'test' })];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    error_2 = _a.sent();
                    return [2 /*return*/, expect(error_2.message).toMatch(/The aud parameter does not include this client/)];
                case 3: throw new Error('Expected to throw');
            }
        });
    }); });
    it('Token is expired', function () { return __awaiter(void 0, void 0, void 0, function () {
        var idToken, error_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    idToken = (0, jwksMock_1.getToken)({
                        email: email,
                        sub: 'sub',
                        aud: clientId,
                        iss: verifyAppleIdToken_1.APPLE_BASE_URL,
                        exp: new Date('2019-01-01'),
                    }, jwksMock);
                    return [4 /*yield*/, (0, index_1.default)({ idToken: idToken, clientId: clientId })];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    error_3 = _a.sent();
                    return [2 /*return*/, expect(error_3.message).toMatch(/jwt expired/)];
                case 3: throw new Error('Expected to throw');
            }
        });
    }); });
    it('Nonce is not valid', function () { return __awaiter(void 0, void 0, void 0, function () {
        var idToken, error_4;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    idToken = (0, jwksMock_1.getToken)({
                        email: email,
                        sub: 'sub',
                        aud: clientId,
                        iss: verifyAppleIdToken_1.APPLE_BASE_URL,
                        nonce: 'abc',
                    }, jwksMock);
                    return [4 /*yield*/, (0, index_1.default)({ idToken: idToken, clientId: clientId, nonce: 'def' })];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    error_4 = _a.sent();
                    return [2 /*return*/, expect(error_4.message).toMatch(/jwt nonce invalid/)];
                case 3: throw new Error('Expected to throw');
            }
        });
    }); });
});
//# sourceMappingURL=verifyAppleIdToken.test.js.map